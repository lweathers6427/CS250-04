4. System Description
4.1 Brief overview of ticketing system
The following sections detail the Software Design Specifications for the Movie theater ticketing system.  This will offer an outline of the architectural design of the project before implementation.  This will provide a view of the flow of the ticketing system, starting from the user logging in, to completing the purchase.

5. Software Architecture Overview

Below is a diagram of the system architecture.  This serves as an overview for the developer on how the system should work. The diagram shows the flow from the user connecting to the ticketing system via their device.  The data goes through the load balancer and connects to the web servers.  The web servers then take the input from the user to search the database for the movie, and send the information back through the web servers to the user.

The access for employees is similar but instead of accessing the system through a personal device, the employees would be using computers at the theater or office.

System administrators will access the Web Servers as well as the SQL DB via system administrator PC which they will be the only users who have access to.

5.1 Architectural diagram

 












5.2 UML Diagram


6. Description of Classes, Objects & Attributes

Below are descriptions of the classes, objects, and attributes that will be used for the development of the Movie theater ticketing system. The objects and respective functions described will reside within the SQL database.  

The database itself will use SQL and will be managed by the System Administrators.  

6.1 Movie Showtime
Represents scheduled screening time of a movie
Stores when a show occurs (startTime)
Tracks ticket and seating info (price, seatAvailable, seatMap)
	6.1.1 Attributes
(int) showtimeID: Sequential identifier for movie showtime, starting at 1
(DateTime) startTime: Exact time stamp for movie showtime.
(int) price: Non-discounted price for ticket at that time.
(int) seatAvailable: Holds the number of seats available left for a specific showtime. Used as the condition of isAvailable method.
(Map<string, string>) seatMap: A map that holds the status and the location of a seat. A string is used for status (available, reserved or non-reserved). The other string holds the seat number that indicates the row and column location of a seat (e.g. “M17”).
	6.1.2 Methods
(bool) isAvailable(): Return false when seatAvailable == 0
(int) getShowtimeID(): Return showtime ID
6.2 Movie
Holds movie information
Stores a list of reviews for the film
Stores a list of showtime set by the administrators
	6.2.1 Attributes
(int) movieID: Unique, auto-incremented ID for each movie
(string) movieName: Name of the movie show to users
(List<string>) reviews: List of critics reviews
(List<Showtime>) startTime: List of movie showtime
6.3 Screen
Models an auditorium in a theater
Identify the auditorium (screenID) and capacity (seatNum)
References the movie that is currently showing (movie)
	6.3.1 Attributes
(int) screenID: Unique ID of the auditorium
(int) seatNum: Number of capacity for an auditorium
(Movie) movie: Movie object 
6.4 Theater
Represent the physical theater location
Holds cinema info (theaterID, theaterName, theaterAddress)
Contain one or more Screen objects
Managed by administrator
	6.4.1 Attributes
(int) theaterID: Unique, auto-incremented ID for each theater
(string) theaterName: Name of a theater
(string) theaterAddress: Address location of a theater
(List<Screen>) screen: List of screens in the theater
6.5 Ticket
Records one purchased seat at a specific time
Combine movieID and showtimeID for a customer’s purchase (ticketID)
Identify each ticket (ticketType)
Checked or removed by Customer.cancelTicket()
	6.5.1 Attributes
(int) ticketID: Unique ID for each tickets
(int) showtimeID: ID that matches movie and showtime ID combined
(string) ticketType: Ticket type purchased (Regular, Deluxe)
(string) seatNumber: Status of seating or seat number (e.g. “A10”, “un-reserved”)
	6.5.2 Methods
purchaseTicket(): Calls purchase service
6.6 PurchaseService
Support step for processing a customer’s reservation into a paid ticket
Reserve a seat in a showtime (reserveSeat())
Handle payment selection and processing (selectPaymentMethod(), confirmPurchase())
Calls Showtime.isAvailable() and update seatAvailable
Uses a timer to limit reservation time for a user’s purchase
	6.6.1 Attributes
(DateTime) reservationStartTime: The time when the seat reservation began
(int) reservationTimeOut: Time limit (minutes) to complete a purchase
	6.6.2 Methods
reserveSeat(): Decrements available seats for a given showtime
selectDiscount(): Show selections for regular and discounted prices (regular, students, military, senior, etc.)
selectPaymentMethod(): Prompt user to select payment methods (credit card, gift card, etc.)
confirmPurchase(): Finalize ticket purchase. Returns true if the payment is successful and the timer has not expired; return false otherwise.
startTimer(): Starts countdown timer when a seat is reserved
isTimerExpired(): Checks if reservationTimeOut number of minutes has passed; cancel purchase when true
6.7 Administrators
Special user with rights to manage movie schedules and handle customer errors
Override system settings (overrideSystem())
Add or remove movies (addMovie(), removeMovie())
Change showtimes (rescheduleShowtime())
	6.7.1 Methods
overrideSystem(): Allow admins to take over the system for error handling or support customer
rescheduleShowtime(m: Movie, s Showtime, newTime: DateTime): Allows admins to change schedules to unpublished movie showtime
addMovie(m: Movie): Allows admins to add movie to a screen
removeMovie(m: Movie): Allows admins to remove unpublished movie showtime
6.8 Customer
End user that browses, selects, and purchase tickets
Create and manage their account (register())
Browse available movies and showtimes (browse(), selectMovie(), selectShowtime())
Maintain payment info and track tickets held (creditCardInfo, ticketLimit, ticketsHeld)
Uses purchaseService for booking
	6.8.1 Attributes
(string) userEmail: Unique email the customer uses to log in
(string) creditCardInfo: Credit card info for payments
(int) ticketLimit: Maximum number of unexpired tickets each customer can hold
(int) ticketsHeld: Current number of a customer’s unexpired tickets
	6.8.2 Method
register(): Creates new customer account; prompt invalid registration if email is already in use
browse(): Show movies currently available for booking; return empty list if none
selectMovie(movie: string): Choose a movie by clicking on the movie shown to the customer
selectShowtime(showtime: DateTime): Choose an available showtime by clicking; showtime will not be shown if availability == 0
cancelTicket(): Cancel the ticket selected; proceed to payment if otherwise
6.9 User
Base class for everyone who logs into the system (Customer and Administrator)
Stores authentication data (userID, userName, password)
Verify credentials (verifyLogin())
Extended by Customer and Administrator
	6.9.1 Attributes
(int) userID: System-generated unique user identifier
(int) password: User entered code for authentication
(string) userName: Display name set by the user
	6.9.2 Methods
verifyLogin(): Check credentials given by the user against the record; prompt a fail message for invalid email and password are given


7.  Development Plan and Timeline

7.1 Begin Development
Consult with the design team to create a diagram showing the flow of the system.  
Once design is approved, development team will begin working on the creation of the system
After creation of each module, the QA team will test functionality between modules to confirm functionality.
Consult with System Administrators for security patching.  Also, will confirm with System Administrators that all proper security practices have been implemented to protect the customer as well as the theater.
Discuss hiring customer service representatives to be available to assist users with issues.

7.1.2 Testing
Test login functionality
User name/password
Guest Login
Forgot user name or Forgot password.
Create new account
Test search functionality
Confirm can search Movie DB
Confirm filters functionality
Can search multiple theaters
Can search different days
Shopping Cart
Test user can make purchase using different payment methods (credit card, pay pal, zelle, venmo, etc)
Test user can use rewards to make purchases
Test user account is credited with reward points when making purchases
Test user can request refund
Security
Confirm CAPTCHA or MFA works
Confirm scheduling of updates during low peak hours (12am-5am)
Confirm encryption of purchases
System availability
Stress testing, make sure the system can handle a high volume of requests.  
Verify in the event that the main system goes down, the ticketing system fails over to the backup system to mitigate downtime.
Nightly backups of system
Disaster recovery plan in the event of unplanned outage
Hot site on standby
Ability to attach SQL DB to backup system

7.1.3 User testing
Invite small group of users to test out ticketing system
Take feedback from user testing to make changes to the system.

7.1.4 Final release
Create event for release of ticketing system
Discounts for first 500 users to login

7.2 Team member responsibilities
Below is a list of who is responsible for what aspects of the development process for the Movie theater ticketing system

7.2.1 UX/UI Team
Take an architectural diagram and implement.
Take user input from user testing and implement into final Movie theater ticketing system
Creates/manages GUI for ticketing system

7.2.2 Development team
Develop code for the site.
Create APIs for things like shopping carts, emails, etc.
Implement user authentication.
Collaborate with the UX/UI team to deliver and maintain the site.
Implement proper security with the help of System Administrators (i.e MFA, CAPTCHA)
Collaborate with System Administrators for patching and security updates to ensure the system is always running on latest versions.

7.2.3 QA
Test a new version before being released to the site.  Check for bugs, functionality that is failing, and report back to the development team to fix.

7.2.4 Database team
Create database to manage Movie theater ticketing infrastructure
Ensure database updates are installed when available during low peak hours
Perform weekly indexing of DB to ensure the database has no errors.
7.2.5 Customer Service
Work with customers having issues, front end support
Escalate to the development team when issues with the site are found.

